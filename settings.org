#+TITLE: lsmag's .emacs.d
#+PROPERTY: header-args :tangle yes
#+OPTIONS: TOC:2

TODO move the splitting functions to the general section,
where they belong!

TODO also, tweak elfeed, and add documentation. PLEASE.

TODO add new org-capture template with =file+function= to store it
_under_ the very first DONE heading!
https://github.com/tkf/org-mode/blob/master/lisp/org-capture.el#L914

* About
* Bootstrap
** Configuration management

Most packages listed here are installed and configured using [[https://github.com/jwiegley/use-package][use-package]]
coupled with [[https://github.com/emacsmirror/diminish][diminish]] to hide minor modes from the mode line.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-verbose t         ; logs to *Messages* if package takes longer than 1s to load
      use-package-always-ensure t)  ; always ensures packages are installed

(use-package diminish)
#+END_SRC

** Auto-updates

I set [[https://github.com/rranelli/auto-package-update.el][auto-package-update]] to auto update on startup at least once every
14 days.

#+BEGIN_SRC emacs-lisp
(use-package auto-package-update
  :init
    (setq auto-package-update-interval 14)
  :config
    (auto-package-update-maybe))
#+END_SRC

** Documenting shortcuts

I try to use [[https://github.com/darksmile/cheatsheet][cheatsheet]] for documenting most shortcuts defined here.
Type =M-x cheatsheet-show= to take a quick look at them.

#+BEGIN_SRC emacs-lisp
(use-package cheatsheet)
#+END_SRC

** Specific customizations

Sometimes emacs likes to save some specific settings. To avoid
having these appended to =.init.el=, we tell emacs to save them
on a special ignored file.

#+BEGIN_SRC emacs-lisp
(setq custom-file
      (expand-file-name
       (concat user-emacs-directory "custom.el")))

; The `'noerror` here is to ensure emacs doesn't break
; the custom.el does not exist
(load custom-file 'noerror)
#+END_SRC

** User-defined variables

Some specific variables are kept separate in a gitignored file,
all prefixed with =lsmag-=.

#+BEGIN_SRC emacs-lisp
(let ((lsmag-variables-path (expand-file-name
                              (concat user-emacs-directory "my-variables.el"))))

  (when (file-exists-p lsmag-variables-path)
    (load-file lsmag-variables-path)))

(defun lsmag-get-key (variable default)
  "Evaluates variable if available or returns default"
  (if (boundp variable)
    (eval variable)
    default))
#+END_SRC

* Appearance
** Theme

The theme I'm using is the light [[https://github.com/fniessen/emacs-leuven-theme][leuven-theme]].

#+BEGIN_SRC emacs-lisp
;(use-package plan9-theme
;  :config
;    (load-theme 'plan9 t))
(use-package leuven-theme
  :config
    (load-theme 'leuven t))
#+END_SRC

** Fonts

My favorite font is =Inconsolata=, you need to install it first for it
to work here.

There's also [[https://github.com/domtronn/all-the-icons.el][all-the-icons]] with a set of icons most prominently used
in Neotree. Installing the package _does not_ install the icons, for
that, please consult [[https://github.com/domtronn/all-the-icons.el#installing-fonts][their documentation]].

#+BEGIN_SRC emacs-lisp
(setq default-frame-alist '((font . "Inconsolata-14")))

(use-package all-the-icons)
#+END_SRC

** Mode line

I'm using [[https://github.com/Malabarba/smart-mode-line][smart-mode-line]] for beautiful and simple... mode lines (I
know, _surprise_? I'll stop with the humour). I used to use the dark
theme before but it didn't play too well with the plan9 theme.

#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line
  :init
    (setq sml/no-confirm-load-theme t)  ; don't prompt to confirm before loading the theme
    (setq sml/theme 'respectful)
  :config
    (sml/setup))
#+END_SRC

** Cleaning up the UI

To make the editor look as clean as possible, some =bars= need to be disabled.

#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
#+END_SRC

** Frame title

This formats the frame title with the buffer name, its mode and where it's saved.

#+BEGIN_SRC emacs-lisp
(setq frame-title-format '("" "%b %* [%m]"))
#+END_SRC

** Visual helpers

Some built-in emacs configurations involve:
- always highlight the current line
- indicate empty lines
- show line numbers

#+BEGIN_SRC emacs-lisp
(global-hl-line-mode 1)  ; always highlight the current line
(global-linum-mode t)  ; shows line numbers

(setq indicate-empty-lines t)
#+END_SRC

I'm using [[https://github.com/alpaker/Fill-Column-Indicator][fill-column-indicator]] to draw a red line on column 120 to serve
as a guide too avoid too long lines.

#+BEGIN_SRC emacs-lisp
(use-package fill-column-indicator
  :diminish
  :init
    (setq fci-rule-column 120)
    (setq fci-rule-color "darkred")
  :config
    (define-globalized-minor-mode my-global-fci-mode fci-mode turn-on-fci-mode)
    (my-global-fci-mode 1))
#+END_SRC

To show vertical lines on indented blocks, [[https://github.com/zk-phi/indent-guide][indent-guide]] for the rescue!

#+BEGIN_SRC emacs-lisp
(use-package indent-guide
  :diminish
  :config
    (add-hook 'prog-mode-hook #'indent-guide-mode))
#+END_SRC

Finally, to highlight =( [ {= with different colors depending on hierarchy, I'm
using [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]]:

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :diminish
  :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

* General
** Dired

[[https://www.gnu.org/software/emacs/manual/html_node/dired-x/][Dired-x]] adds extra features to dired. For now, we only need dired to
omit temporary files.

#+BEGIN_SRC emacs-lisp
(load "dired-x")
(with-eval-after-load "dired"
  (setq-default dired-omit-files-p t)
  (setq dired-omit-files (concat dired-omit-files "^\\.|\\*|\\#")))
#+END_SRC

** Evil

Hey, I like Vim's usability more than Emacs'. That's it, basically. [[https://github.com/emacs-evil/evil][Evil repo]]

#+BEGIN_SRC emacs-lisp
(use-package evil
  :config
    (evil-mode 1))
#+END_SRC

For keybindings I use [[https://github.com/noctuid/general.el][general]], since it's slightly more flexible than
other packages I used. The leader key used for shortcuts will be =SPC=.

#+BEGIN_SRC emacs-lisp
(use-package general
  :config
    (general-evil-setup))

(defconst lsmag-leader-key (lsmag-get-key 'lsmag-leader-prefix "SPC"))
#+END_SRC

When referring to shortcuts below - especially in inclusions for =cheatsheet=,
the function below will cut some of the

#+BEGIN_SRC emacs-lisp
(defun lsmag-leader-shortcut/str (shortcut)
  (concat (concat lsmag-leader-key " ") shortcut))
#+END_SRC

** Ido

[[https://www.emacswiki.org/emacs/InteractivelyDoThings][Ido]] is an enhanced switch buffer, and comes preinstalled with Emacs 24.x.
In addition, [[https://github.com/creichert/ido-vertical-mode.el][ido-vertical-mode]] is installed as well... because vertical
list is prettier than horizontal list? idk.

#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching t)
(require 'ido)
(ido-mode 1)
(ido-everywhere 1)

(use-package ido-vertical-mode
  :init
    (setq ido-vertical-define-keys 'C-n-C-p-up-and-down)
    (setq ido-vertical-show-count t)
  :config
    (ido-vertical-mode 1))
#+END_SRC

Finally, [[https://github.com/DarwinAwardWinner/ido-completing-read-plus][ido-completing-read+]] is installed for replacing emacs completion
for IDO... everywhere

#+BEGIN_SRC emacs-lisp
(use-package ido-completing-read+
  :config
    (ido-ubiquitous-mode 1))
#+END_SRC

The only IDO shortcut I need the most is to switch buffers:

#+BEGIN_SRC emacs-lisp
(general-nmap :prefix lsmag-leader-key
  "sb" 'ido-switch-buffer)

(cheatsheet-add
  :group 'Navigation
  :key (lsmag-leader-shortcut/str "sb")
  :description "Open switch buffer menu")
#+END_SRC

** Smex

[[https://github.com/nonsequitur/smex][Smex]] (built on top of ido) is used here as an =M-x= replacement.

#+BEGIN_SRC emacs-lisp
(use-package smex
  :bind
    ("M-x" . smex)
    ("M-X" . smex-major-mode-commands)
    ; and this is our old M-x, should we need it
    ("C-c C-c M-x" . execute-extended-command))

(cheatsheet-add-group 'Smex
  '(:key "M-x" :description "Opens smex to run commands")
  '(:key "M-X" :description "Open major mode commands list")
  '(:key "C-c C-c M-x" :description "Opens good ol' M-x instead of smex"))
#+END_SRC

** Which-key

The package [[https://github.com/justbur/emacs-which-key][which-key]] will show possible keybindings for your currently entered incomplete command.

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :diminish
  :init
    (setq which-key-idle-delay 0.5)
  :config
    (which-key-mode))
#+END_SRC

** Eldoc

[[https://www.emacswiki.org/emacs/ElDoc][Eldoc]] is a minor mode that shows the argument list of the function call in the echo area.
Simple, but handy.

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'turn-on-eldoc-mode)
#+END_SRC

** Projectile

Used ostensibly for package management.

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :config
    (projectile-global-mode))

(general-nmap :prefix lsmag-leader-key
  "pf" 'projectile-find-file)

(cheatsheet-add
  :group 'Navigation
  :key (lsmag-leader-shortcut/str "pf")
  :description "Open projectile menu to find files within a project")
#+END_SRC

** Switching workspaces

Kinda like virtual desktops, [[https://github.com/wasamasa/eyebrowse][https://github.com/wasamasa/eyebrowse]] allows me to maintain
multiple workspaces with independent frames.

#+BEGIN_SRC emacs-lisp
(use-package eyebrowse
  :init
    ; =t= here means eyebrowse will always open a new workspace clean with *Scratch*
    (setq eyebrowse-new-workspace t)
  :config
    (eyebrowse-mode))

(general-nmap :prefix lsmag-leader-key
  "1" 'eyebrowse-switch-to-window-config-1
  "2" 'eyebrowse-switch-to-window-config-2
  "3" 'eyebrowse-switch-to-window-config-3
  "4" 'eyebrowse-switch-to-window-config-4
  "5" 'eyebrowse-switch-to-window-config-5
  "6" 'eyebrowse-switch-to-window-config-6
  "7" 'eyebrowse-switch-to-window-config-7
  "8" 'eyebrowse-switch-to-window-config-8
  "9" 'eyebrowse-switch-to-window-config-9
  "0" 'eyebrowse-switch-to-window-config-0
  "ww" 'eyebrowse-switch-to-last-window-config
  "wc" 'eyebrowse-close-window-config)

(cheatsheet-add-group 'Navigation
  `(:key ,(lsmag-leader-shortcut/str "<number>") :description "Switch to workspace")
  `(:key ,(lsmag-leader-shortcut/str "ww") :description "Switch to last used workspace")
  `(:key ,(lsmag-leader-shortcut/str "wc") :description "Close current workspace"))
#+END_SRC

** File explorer

[[https://github.com/jaypei/emacs-neotree][Neotree]] opens a handy file explorer in a sidebar.. because sometimes we're not
in a project and that comes in handy, y'know?

#+BEGIN_SRC emacs-lisp
(use-package neotree
  :init
    (setq neo-theme 'icons))

(general-nmap :prefix lsmag-leader-key "pt" 'neotree-toggle)

(cheatsheet-add
  :group 'Navigation
  :key (lsmag-leader-shortcut/str "pt")
  :description "Toggle the NEOTree file explorer")
#+END_SRC

** Frame navigation

When navigating through two windows, =C-w C-w= (default from Evil) is great.  For more
than that, [[https://github.com/abo-abo/ace-window][ace-window]] is a likely better.

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :bind
    ("M-o" . ace-window))

(cheatsheet-add
  :group 'Navigation
  :key "M-o"
  :description "Navigate windows using ace-window")
#+END_SRC

** Code folding

[[https://github.com/gregsexton/origami.el][Origami]] is a more decent code-folding mode for Emacs.

#+BEGIN_SRC emacs-lisp
(use-package origami
  :diminish
  :config
    (global-origami-mode))

(general-nmap :prefix lsmag-leader-key
  "ff" 'origami-toggle-node
  "fo" 'origami-open-node
  "fc" 'origami-close-node
  "fro" 'origami-open-node-recursively
  "frc" 'origami-close-node-recursively)

(cheatsheet-add-group 'Folding
  `(:key ,(lsmag-leader-shortcut/str "ff") :description "Toggle folding")
  `(:key ,(lsmag-leader-shortcut/str "fo") :description "Opens a block")
  `(:key ,(lsmag-leader-shortcut/str "fc") :description "Closes a block")
  `(:key ,(lsmag-leader-shortcut/str "fro") :description "Recursively opens a block")
  `(:key ,(lsmag-leader-shortcut/str "frc") :description "Recursively closes a block"))
#+END_SRC

** Finding definitions in a file

[[https://github.com/bmag/imenu-list][imenu-list]] creates a buffer containing the current buffer's [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Imenu.html][imenu]]
entries.  Useful for finding definitions in a file.

#+BEGIN_SRC emacs-lisp
(use-package imenu-list
  :diminish)

(general-nmap :prefix lsmag-leader-key
  "pa" 'imenu-list-smart-toggle)

; Yes, I am repeating the same function with a different binding here,
; and I don't remember why I did that :(
(general-nmap
  "C-'" 'imenu-list-smart-toggle)

(cheatsheet-add
  :group 'Navigation
  :key (lsmag-leader-shortcut/str "pa")
  :description "Toggle imenu with up-to-date file's tags")
#+END_SRC

** Spell checker

=Aspell= is my preferred spell checker. If not available, emacs will
check for =hunspell= instead.

I also set the spell checker to check comments and strings on prog
modes (when editing programming language files) and on Org files.

#+BEGIN_SRC emacs-lisp
(cond
  ((executable-find "aspell")
    (setq ispell-program-name "aspell"))

  ((executable-find "hunspell")
    (setq ispell-program-name "hunspell"))

  (t
    (setq ispell-program-name nil)))

(add-hook 'prog-mode-hook
  (lambda ()
    (flyspell-prog-mode)))
#+END_SRC

** Syntax checker

Easy enough, [[http://www.flycheck.org/en/latest/][flycheck]] is used globally. I've also added
[[https://github.com/flycheck/flycheck-pos-tip][flycheck-pos-tip]] for sweet syntax check pop-ups.

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :config
    (global-flycheck-mode))

(use-package flycheck-pos-tip
  :diminish
  :config
    (with-eval-after-load 'flycheck
      (flycheck-pos-tip-mode)))
#+END_SRC

** Text completion

[[https://company-mode.github.io/][Company]] is the main framework here. A few other specialized packages
will be installed when needed, depending on
language. [[https://github.com/expez/company-quickhelp][company-quickhelp]] extends company by adding completion
pop-ups.

#+BEGIN_SRC emacs-lisp
(use-package company)

(use-package company-quickhelp
  :config
    (company-quickhelp-mode))
#+END_SRC

** Tackling whitespace
  
Emacs adds tab characters every now and then... and I don't want that,
'cause I don't like it.  Setting =indent-tabs-mode= to =nil= solves
that _except_ for modes that already have this variable defined. Since
I don't know which are, better go with =setq-default= ¯\_(ツ)_/¯

With tab out of the way, we need to instruct emacs where to put
[[https://www.emacswiki.org/emacs/TabStopList][tab stops]]. I use 2 spaces pretty much everywhere but in Python.

Also there's [[https://github.com/lewang/ws-butler][https://github.com/lewang/ws-butler]] for removing trailing
whitespace from recently edited lines. Emacs already provides [[https://www.emacswiki.org/emacs/DeletingWhitespace#toc3][similar
functionality]] but then I risk removing whitespace from lines I didn't
want, which might sometimes lead to HUUUUUGE diffs.
   
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)

(setq tab-stop-list (number-sequence 2 120 2))

(use-package ws-butler)
#+END_SRC

* Programming
** Python

Packages: [[https://github.com/proofit404/anaconda-mode][Anaconda-mode]] and [[https://github.com/proofit404/company-anaconda][company-anaconda]]

#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook
  '(lambda ()
     (setq tab-stop-list (number-sequence 4 120 4))))

(use-package anaconda-mode
  :config
    (add-hook 'python-mode-hook 'anaconda-mode)
    (add-hook 'python-mode-hook 'anaconda-eldoc-mode))

(use-package company-anaconda
  :config
    (with-eval-after-load 'company
      (add-to-list 'company-backends 'company-anaconda)))
#+END_SRC

** Javascript

Packages: [[https://github.com/mooz/js2-mode][js2-mode]] and [[https://github.com/proofit404/company-tern][company-tern]]

#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :config
    (setq js-indent-level 2))

(use-package company-tern
  :config
    (with-eval-after-load 'company
      (add-to-list 'company-backends 'company-tern)))
#+END_SRC

** Front-end

Packages: [[http://web-mode.org/][web-mode]] and [[https://github.com/AdamNiederer/vue-mode][vue-mode]]

#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :config
    (require 'web-mode)
    (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode)))

(use-package vue-mode)
#+END_SRC

** Elixir

Packages: [[https://github.com/elixir-editors/emacs-elixir][elixir-mode]] an [[https://github.com/tonini/alchemist.el][alchemist]]

#+BEGIN_SRC emacs-lisp
(use-package elixir-mode)
(use-package alchemist)
#+END_SRC

** Markdown

Package: [[https://jblevins.org/projects/markdown-mode/][markdown-mode]]

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+END_SRC

* Org

#+BEGIN_SRC emacs-lisp
(require 'org)

(add-hook 'org-mode-hook
  (lambda ()
    (flyspell-mode)))

(use-package htmlize)
#+END_SRC

** Org-capture

I maintain an org file with a specific format as a planner.  To help
me keep it organized, I use =org-capture= and =org-refile= tied together
with a few custom functions.

#+BEGIN_SRC emacs-lisp
(setq lsmag-org-planner-path
  (lsmag-get-key 'lsmag-org-planner-path "~/planner.org"))

(setq org-capture-templates
  '(("t"
     "Journal todo"
     entry
     (file+olp lsmag-org-planner-path "Journal" "Next")
     "*** TODO %? %^g")
    ("r"
     "Reminder"
     entry
     (file+headline lsmag-org-planner-path "Reminders")
     "** %?"
     :prepend t)
    ("d"
     "Braindump"
     entry
     (file+headline lsmag-org-planner-path "Braindump")
     "** %?")))
#+END_SRC

** Custom settings for my planner

What the enormous and inefficient code below does is creating a context-aware =org-refile=.
The function =org-lsmag-done-and-refile= and its sibling(s) will refile the task to
a heading under a =YEAR->MONTH->WEEK= hierarchy.

To understand more about how I use my planner file, [[file:README-planner.org][please read here]].

This whole thing can probably be a lot simpler, but it was my
first time actually writing elisp and I'm proud of the results.
Anyway, feedback is always welcome :)

I might come around and try to remove the repetition later.

#+BEGIN_SRC emacs-lisp
(defun lsmag-org-has-subheading-p ()
  (save-excursion
    (org-goto-first-child)))

(defun lsmag-org-current-week-string ()
  (shell-command-to-string
    "echo -n $(date --date=\"-$(($(date +%u) - 1)) day\" \"+%d %B\") - $(date -dsunday \"+%d %B\")"))

(defun lsmag-org-current-month-string ()
  (format-time-string "%B"))

(defun lsmag-org-current-year-string ()
  (format-time-string "%Y"))

(defun lsmag-org-week-done-heading-is-current-p ()
  (save-excursion
    ; move to DONE heading
    (outline-up-heading 1)
    (org-forward-heading-same-level 1)

    ; descent to WEEK heading
    (org-down-element)
    (org-down-element)
    (org-down-element)

    (string-equal (lsmag-org-current-week-string)
                  (org-element-property :title (org-element-at-point)))))

(defun lsmag-org-prepend-current-week-done-heading ()
  (save-excursion
    ; move point to DONE heading
    (outline-up-heading 1)
    (org-forward-heading-same-level 1)

    ; descent to first child in WEEK heading
    (org-down-element)
    (org-down-element)
    (org-down-element)

    ; insert new element above
    (org-insert-heading)
    (move-end-of-line nil)
    (insert (lsmag-org-current-week-string))))

(defun lsmag-org-month-done-heading-is-current-p ()
  (save-excursion
    ; move to DONE heading
    (outline-up-heading 1)
    (org-forward-heading-same-level 1)

    ; descent to MONTH heading
    (org-down-element)
    (org-down-element)

    (string-equal (lsmag-org-current-month-string)
                  (org-element-property :title (org-element-at-point)))))

(defun lsmag-org-prepend-current-month-done-heading-and-down ()
  (save-excursion
    ; move point to DONE heading
    (outline-up-heading 1)
    (org-forward-heading-same-level 1)

    ; descent to first child in YEAR heading
    (org-down-element)
    (org-down-element)

    ; insert new element above
    (org-insert-heading)
    (move-end-of-line nil)
    (insert (lsmag-org-current-month-string))

    ; insert new WEEK heading and demote it (goes under YEAR)
    (org-insert-heading-after-current)
    (org-demote)
    (move-end-of-line nil)
    (insert (lsmag-org-current-week-string))))

(defun lsmag-org-year-done-heading-is-current-p ()
  (save-excursion
    ; move to DONE heading
    (outline-up-heading 1)
    (org-forward-heading-same-level 1)

    ; descent to YEAR heading
    (org-down-element)

    (string-equal (lsmag-org-current-year-string)
                  (org-element-property :title (org-element-at-point)))))

(defun lsmag-org-prepend-current-year-done-heading-and-down ()
  (save-excursion
    ; move point to DONE heading
    (outline-up-heading 1)
    (org-forward-heading-same-level 1)

    ; descent to first child in DONE heading
    (org-down-element)

    ; insert new element above
    (org-insert-heading)
    (move-end-of-line nil)
    (insert (lsmag-org-current-year-string))

    ; insert new MONTH heading and demote it (goes under YEAR)
    (org-insert-heading-after-current)
    (org-demote)
    (move-end-of-line nil)
    (insert (lsmag-org-current-month-string))

    ; insert new WEEK heading and demote it (goes under MONTH)
    (org-insert-heading-after-current)
    (org-demote)
    (move-end-of-line nil)
    (insert (lsmag-org-current-week-string))))

(defun lsmag-org-create-current-week-done-heading-prepend ()
  (cond
    ((not (lsmag-org-year-done-heading-is-current-p))
      (lsmag-org-prepend-current-year-done-heading-and-down))

    ((not (lsmag-org-month-done-heading-is-current-p))
      (lsmag-org-prepend-current-month-done-heading-and-down))

    ((not (lsmag-org-week-done-heading-is-current-p))
      (lsmag-org-prepend-current-week-done-heading))))

(defun lsmag-org-create-current-week-done-heading-new ()
  (save-excursion
    ; move point to DONE heading
    (outline-up-heading 1)
    (org-forward-heading-same-level 1)

    ; insert new YEAR heading and demote it (goes under DONE)
    (org-insert-heading-after-current)
    (org-demote)

    ; add year data to it
    (move-end-of-line nil)
    (insert (lsmag-org-current-year-string))

    ; insert new MONTH heading and demote it (goes under YEAR)
    (org-insert-heading-after-current)
    (org-demote)
    (move-end-of-line nil)
    (insert (lsmag-org-current-month-string))

    ; insert new WEEK heading and demote it (goes under MONTH)
    (org-insert-heading-after-current)
    (org-demote)
    (move-end-of-line nil)
    (insert (lsmag-org-current-week-string))))

(defun lsmag-org-create-current-week-done-heading ()
  (interactive)
  ; move down to DONE heading to see if it has children
  (let ((done-heading-has-subheading (save-excursion
                                       (outline-up-heading 1)
                                       (org-forward-heading-same-level 1)
                                       (lsmag-org-has-subheading-p))))

    (if done-heading-has-subheading
      ; Add new week heading on the top
      (lsmag-org-create-current-week-done-heading-prepend)
      ; DONE heading has no subheadings, create a new one
      (lsmag-org-create-current-week-done-heading-new))))

(defun lsmag-org-refile-to-current-week-done-heading ()
  (interactive)
  (let ((target (save-excursion
                  (outline-up-heading 1)
                  (org-forward-heading-same-level 1)
                  (org-down-element)
                  (org-down-element)
                  (org-down-element)
                  (point))))

    (org-refile nil nil
      (list nil (buffer-file-name) nil target))
    target))

(defun lsmag-org-point-in-next-heading-p ()
  (save-excursion
    (outline-up-heading 1)
    (let* ((heading (org-element-at-point))
           (title (downcase (org-element-property :title heading))))

      (if (string-equal title "next") t nil))))

(defun lsmag-org-mark-and-refile (todo-keyword)
  "Mark current heading according to todo-keyword and refile it to weekly DONE archive"
  (if (not (lsmag-org-point-in-next-heading-p))
    (message "Won't mark as DONE and refile, not in a task under Next heading")
    (progn
      (lsmag-org-create-current-week-done-heading)
      (let ((target-week (lsmag-org-refile-to-current-week-done-heading)))
        ; After task has been refiled, we move the point to there to mark it as DONE.
        ; Since it's always refiled at the end, we move to the end of the subtree first
        (save-excursion
          ; This will go to the first item under the week heading
          (goto-char target-week)
          (outline-up-heading 1)
          ; Move up, then down to the end of the subtree,
          ; where the newly refiled heading is
          (org-end-of-subtree)
          (org-todo todo-keyword))))))

(defun lsmag-org-done-and-refile ()
  (interactive)
    (lsmag-org-mark-and-refile 'done))

(defun lsmag-org-wontfix-and-refile ()
  (interactive)
    (lsmag-org-mark-and-refile "WONTFIX"))

(general-nmap :prefix lsmag-leader-key
  "oc" 'org-capture
  "or" 'org-refile
  "od" 'lsmag-org-done-and-refile
  "ow" 'lsmag-org-wontfix-and-refile)

(cheatsheet-add-group 'Org
  `(:key ,(lsmag-leader-shortcut/str "oc") :description "Call org-capture")
  `(:key ,(lsmag-leader-shortcut/str "or") :description "Call org-refile")
  `(:key ,(lsmag-leader-shortcut/str "od") :description "Mark current task as done and archive it in the planner")
  `(:key ,(lsmag-leader-shortcut/str "ow") :description "Mark current task as wontfix and archive it in the planner"))
#+END_SRC
* Applications
** Elfeed

[[https://github.com/skeeto/elfeed][Elfeed]] is a feed reader. [[https://github.com/remyhonig/elfeed-org][Elfeed-org]] allows me to configure elfeed
using org files <3

#+BEGIN_SRC emacs-lisp
(use-package elfeed)
(use-package elfeed-org
  :config
    (elfeed-org)
    ; The code below was copied from
    ; https://github.com/jojojames/evil-collection/blob/master/evil-collection-elfeed.el
    (evil-set-initial-state 'elfeed-search-mode 'motion)

    (evil-define-key 'motion elfeed-search-mode-map
      ;; open
      (kbd "<return>") 'elfeed-search-show-entry
      (kbd "S-<return>") 'elfeed-search-browse-url
      "go" 'elfeed-search-browse-url

      "y" 'elfeed-search-yank

      ;; filter
      "s" 'elfeed-search-live-filter
      "S" 'elfeed-search-set-filter

      ;; refresh
      "gR" 'elfeed-search-fetch ; TODO: Which update function is more useful?
      "gr" 'elfeed-search-update--force

      ;; quit
      "q" 'quit-window
      "ZQ" 'quit-window
      "ZZ" 'quit-window)

    (evil-define-key '(motion visual) elfeed-search-mode-map
      "+" 'elfeed-search-tag-all
      "-" 'elfeed-search-untag-all
      "U" 'elfeed-search-tag-all-unread
      "u" 'elfeed-search-untag-all-unread)

    (evil-set-initial-state 'elfeed-show-mode 'motion)
    (evil-define-key 'motion elfeed-show-mode-map
      (kbd "S-<return>") 'elfeed-show-visit
      "go" 'elfeed-show-visit

      ;; filter
      "s" 'elfeed-show-new-live-search

      "y" 'elfeed-show-yank

      "+" 'elfeed-show-tag
      "-" 'elfeed-show-untag

      "A" 'elfeed-show-add-enclosure-to-playlist
      "P" 'elfeed-show-play-enclosure
      "d" 'elfeed-show-save-enclosure

      "]" 'elfeed-show-next
      "[" 'elfeed-show-prev
      "gj" 'elfeed-show-next
      "gk" 'elfeed-show-prev
      (kbd "C-j") 'elfeed-show-next
      (kbd "C-k") 'elfeed-show-prev

      ;; refresh
      "gr" 'elfeed-show-refresh

      ;; quit
      "q" 'elfeed-kill-buffer
      "ZQ" 'elfeed-kill-buffer
      "ZZ" 'elfeed-kill-buffer))
#+END_SRC

** TODO Ranger
** TODO Magit
* Custom functions
** Splitting windows

Evil's default behavior on splitting doesn't focus on the new window
when created. These functions fix this:

#+BEGIN_SRC emacs-lisp
(defun lsmag-do-split ()
  "Splits horizontally and focuses on the new window"
  (interactive)
  (evil-window-split)
  (evil-window-down 1))

(defun lsmag-do-vsplit ()
  "Splits vertically and focuses on the new window"
  (interactive)
  (evil-window-vsplit)
  (evil-window-right 1))

(general-nmap :prefix lsmag-leader-key
  "vv" 'lsmag-do-vsplit
  "ss" 'lsmag-do-split)

(cheatsheet-add-group 'Splitting
  `(:key ,(lsmag-leader-shortcut/str "vv") :description "Split windows vertically")
  `(:key ,(lsmag-leader-shortcut/str "ss") :description "Split windows horizontally"))
#+END_SRC
